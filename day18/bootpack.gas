	.file	"bootpack.c"
	.data
_keytable0.0:
	.byte	0
	.byte	0
	.byte	49
	.byte	50
	.byte	51
	.byte	52
	.byte	53
	.byte	54
	.byte	55
	.byte	56
	.byte	57
	.byte	48
	.byte	45
	.byte	94
	.byte	0
	.byte	0
	.byte	81
	.byte	87
	.byte	69
	.byte	82
	.byte	84
	.byte	89
	.byte	85
	.byte	73
	.byte	79
	.byte	80
	.byte	64
	.byte	91
	.byte	0
	.byte	0
	.byte	65
	.byte	83
	.byte	68
	.byte	70
	.byte	71
	.byte	72
	.byte	74
	.byte	75
	.byte	76
	.byte	59
	.byte	58
	.byte	0
	.byte	0
	.byte	93
	.byte	90
	.byte	88
	.byte	67
	.byte	86
	.byte	66
	.byte	78
	.byte	77
	.byte	44
	.byte	46
	.byte	47
	.byte	0
	.byte	42
	.byte	0
	.byte	32
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	55
	.byte	56
	.byte	57
	.byte	45
	.byte	52
	.byte	53
	.byte	54
	.byte	43
	.byte	49
	.byte	50
	.byte	51
	.byte	48
	.byte	46
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	92
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	92
	.byte	0
	.byte	0
_keytable1.1:
	.byte	0
	.byte	0
	.byte	33
	.byte	34
	.byte	35
	.byte	36
	.byte	37
	.byte	38
	.byte	39
	.byte	40
	.byte	41
	.byte	126
	.byte	61
	.byte	126
	.byte	0
	.byte	0
	.byte	81
	.byte	87
	.byte	69
	.byte	82
	.byte	84
	.byte	89
	.byte	85
	.byte	73
	.byte	79
	.byte	80
	.byte	96
	.byte	123
	.byte	0
	.byte	0
	.byte	65
	.byte	83
	.byte	68
	.byte	70
	.byte	71
	.byte	72
	.byte	74
	.byte	75
	.byte	76
	.byte	43
	.byte	42
	.byte	0
	.byte	0
	.byte	125
	.byte	90
	.byte	88
	.byte	67
	.byte	86
	.byte	66
	.byte	78
	.byte	77
	.byte	60
	.byte	62
	.byte	63
	.byte	0
	.byte	42
	.byte	0
	.byte	32
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	55
	.byte	56
	.byte	57
	.byte	45
	.byte	52
	.byte	53
	.byte	54
	.byte	43
	.byte	49
	.byte	50
	.byte	51
	.byte	48
	.byte	46
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	95
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	124
	.byte	0
	.byte	0
LC0:
	.ascii "task a\0"
LC1:
	.ascii "console\0"
LC2:
	.ascii " \0"
	.text
	.balign 2
.globl _HariMain
	.def	_HariMain;	.scl	2;	.type	32;	.endef
_HariMain:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	leal	-780(%ebp), %eax
	subl	$940, %esp
	leal	-268(%ebp), %ebx
	pushl	$0
	pushl	%eax
	leal	-860(%ebp), %eax
	pushl	$128
	pushl	%eax
	call	_fifo_init
	call	_init_gdtidt
	call	_init_pic
	call	_io_sti
	call	_init_pit
	pushl	$248
	pushl	$33
	call	_io_out8
	pushl	$239
	pushl	$161
	call	_io_out8
	addl	$32, %esp
	call	_timer_alloc
	leal	-860(%ebp), %edx
	pushl	$1
	pushl	%edx
	movl	%eax, -912(%ebp)
	pushl	$50
	pushl	%eax
	call	_timer_set
	leal	-860(%ebp), %eax
	pushl	$256
	pushl	%eax
	call	_init_keyboard
	pushl	$-1073741825
	pushl	$4194304
	call	_memtest
	addl	$32, %esp
	pushl	$3932160
	movl	%eax, -888(%ebp)
	call	_memman_init
	pushl	$647168
	pushl	$4096
	pushl	$3932160
	call	_memman_free
	movl	-888(%ebp), %eax
	subl	$4194304, %eax
	pushl	%eax
	pushl	$4194304
	pushl	$3932160
	call	_memman_free
	call	_init_palette
	movswl	4086,%eax
	movswl	4084,%edx
	pushl	%eax
	movl	%eax, -884(%ebp)
	movswl	4084,%eax
	pushl	%eax
	movl	%edx, -880(%ebp)
	pushl	4088
	pushl	$3932160
	call	_shtctl_init
	addl	$44, %esp
	movl	%eax, %esi
	pushl	%eax
	call	_sheet_alloc
	pushl	%esi
	movl	%eax, -892(%ebp)
	call	_sheet_alloc
	pushl	%esi
	movl	%eax, -896(%ebp)
	call	_sheet_alloc
	movswl	4086,%edx
	movl	%eax, -900(%ebp)
	movswl	4084,%eax
	imull	%edx, %eax
	pushl	%eax
	pushl	$3932160
	call	_memman_alloc_4k
	pushl	$8320
	pushl	$3932160
	movl	%eax, %edi
	call	_memman_alloc_4k
	pushl	$-1
	movl	%eax, -908(%ebp)
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	%edi
	pushl	-892(%ebp)
	call	_sheet_setbuf
	addl	$48, %esp
	pushl	$99
	pushl	$16
	pushl	$16
	pushl	%ebx
	pushl	-896(%ebp)
	call	_sheet_setbuf
	pushl	$-1
	pushl	$52
	pushl	$144
	pushl	-908(%ebp)
	pushl	-900(%ebp)
	call	_sheet_setbuf
	addl	$40, %esp
	pushl	-884(%ebp)
	pushl	-880(%ebp)
	pushl	%edi
	call	_init_screen
	leal	-860(%ebp), %edx
	leal	-876(%ebp), %eax
	pushl	%eax
	pushl	$512
	pushl	%edx
	call	_enable_mouse
	pushl	$99
	pushl	%ebx
	movl	$2, %ebx
	call	_init_mouse_cursor8
	addl	$32, %esp
	pushl	$1
	pushl	$LC0
	pushl	$52
	pushl	$144
	pushl	-908(%ebp)
	call	_make_window8
	pushl	$7
	pushl	$16
	pushl	$128
	pushl	$28
	pushl	$8
	pushl	-900(%ebp)
	call	_make_textbox8
	addl	$44, %esp
	movswl	4084,%eax
	movl	$8, -924(%ebp)
	leal	-16(%eax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	movl	%eax, -916(%ebp)
	movswl	4086,%eax
	pushl	$3932160
	leal	-44(%eax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	movl	$7, -928(%ebp)
	movl	%eax, -920(%ebp)
	call	_task_init
	pushl	$0
	pushl	$1
	movl	%eax, -936(%ebp)
	pushl	%eax
	movl	%eax, -836(%ebp)
	call	_taskrun
	pushl	%esi
	call	_sheet_alloc
	pushl	$42240
	pushl	$3932160
	movl	%eax, -904(%ebp)
	call	_memman_alloc_4k
	pushl	$-1
	pushl	$165
	movl	%eax, -940(%ebp)
	pushl	$256
	pushl	%eax
	pushl	-904(%ebp)
	call	_sheet_setbuf
	addl	$48, %esp
	pushl	$0
	pushl	$LC1
	pushl	$165
	pushl	$256
	pushl	-940(%ebp)
	call	_make_shell
	call	_task_alloc
	pushl	$65536
	pushl	$3932160
	movl	%eax, %edi
	call	_memman_alloc_4k
	movl	-904(%ebp), %edx
	addl	$65528, %eax
	movl	%eax, 72(%edi)
	movl	$_task_console, 48(%edi)
	movl	$8, 88(%edi)
	movl	$16, 92(%edi)
	movl	$8, 96(%edi)
	movl	$8, 100(%edi)
	movl	$8, 104(%edi)
	movl	$8, 108(%edi)
	movl	%edx, 4(%eax)
	movl	-888(%ebp), %edx
	movl	72(%edi), %eax
	movl	%edx, 8(%eax)
	pushl	$2
	pushl	$2
	pushl	%edi
	call	_taskrun
	addl	$40, %esp
	pushl	$0
	pushl	$0
	pushl	-892(%ebp)
	call	_sheet_move
	pushl	-920(%ebp)
	pushl	-916(%ebp)
	pushl	-896(%ebp)
	call	_sheet_move
	pushl	$56
	pushl	$8
	pushl	-900(%ebp)
	call	_sheet_move
	addl	$36, %esp
	pushl	$200
	pushl	$100
	pushl	-904(%ebp)
	call	_sheet_move
	pushl	$0
	pushl	-892(%ebp)
	call	_sheet_updown
	pushl	$1
	pushl	-904(%ebp)
	call	_sheet_updown
	pushl	$2
	pushl	-900(%ebp)
	call	_sheet_updown
	addl	$36, %esp
	pushl	$3
	pushl	-896(%ebp)
	call	_sheet_updown
	popl	%ecx
	movl	$0, -944(%ebp)
	movl	$0, -948(%ebp)
	movb	4081, %al
	popl	%ebx
	sarb	$4, %al
	movl	%eax, %edx
	andl	$7, %edx
	movl	%edx, -952(%ebp)
L2:
	leal	-860(%ebp), %esi
	call	_io_cli
	pushl	%esi
	call	_fifo_status
	popl	%edx
	testl	%eax, %eax
	je	L52
	pushl	%esi
	call	_fifo_get
	movl	%eax, %ebx
	call	_io_sti
	popl	%ecx
	leal	-256(%ebx), %eax
	cmpl	$255, %eax
	jbe	L53
	leal	-512(%ebx), %eax
	cmpl	$255, %eax
	jbe	L54
	cmpl	$1, %ebx
	je	L55
	testl	%ebx, %ebx
	jne	L2
	pushl	$1
	pushl	%esi
	pushl	$50
	pushl	-912(%ebp)
	call	_timer_set
	addl	$16, %esp
	cmpl	$0, -928(%ebp)
	js	L2
	movl	-924(%ebp), %eax
	pushl	$43
	addl	$7, %eax
	movl	-900(%ebp), %edx
	pushl	%eax
	pushl	$28
	pushl	-924(%ebp)
	pushl	$7
	pushl	4(%edx)
	pushl	(%edx)
L50:
	call	_boxfill8
	movl	-924(%ebp), %eax
	pushl	$44
	addl	$8, %eax
	pushl	%eax
	pushl	$28
	pushl	-924(%ebp)
	pushl	-900(%ebp)
	call	_sheet_refresh
	addl	$48, %esp
	jmp	L2
L55:
	pushl	$0
	pushl	%esi
	pushl	$50
	pushl	-912(%ebp)
	call	_timer_set
	addl	$16, %esp
	cmpl	$0, -928(%ebp)
	js	L2
	movl	-924(%ebp), %eax
	pushl	$43
	addl	$7, %eax
	pushl	%eax
	movl	-900(%ebp), %eax
	pushl	$28
	pushl	-924(%ebp)
	pushl	$0
	pushl	4(%eax)
	pushl	(%eax)
	jmp	L50
L54:
	movzbl	%bl, %eax
	pushl	%eax
	leal	-876(%ebp), %eax
	pushl	%eax
	call	_mouse_decode
	popl	%edx
	popl	%ecx
	testl	%eax, %eax
	je	L2
	movl	-868(%ebp), %eax
	movl	-872(%ebp), %edx
	addl	%eax, -920(%ebp)
	addl	%edx, -916(%ebp)
	js	L56
L39:
	cmpl	$0, -920(%ebp)
	js	L57
L40:
	movswl	4084,%eax
	decl	%eax
	cmpl	%eax, -916(%ebp)
	jle	L41
	movl	%eax, -916(%ebp)
L41:
	movswl	4086,%eax
	decl	%eax
	cmpl	%eax, -920(%ebp)
	jle	L42
	movl	%eax, -920(%ebp)
L42:
	pushl	-920(%ebp)
	pushl	-916(%ebp)
	pushl	-896(%ebp)
	call	_sheet_move
	addl	$12, %esp
	testl	$1, -864(%ebp)
	je	L2
	movl	-920(%ebp), %eax
	subl	$8, %eax
	pushl	%eax
	movl	-916(%ebp), %eax
	subl	$80, %eax
	pushl	%eax
	pushl	-900(%ebp)
	call	_sheet_move
	addl	$12, %esp
	jmp	L2
L57:
	movl	$0, -920(%ebp)
	jmp	L40
L56:
	movl	$0, -916(%ebp)
	jmp	L39
L53:
	cmpl	$383, %ebx
	jg	L8
	cmpl	$0, -948(%ebp)
	jne	L9
	movb	_keytable0.0-256(%ebx), %al
L51:
	movb	%al, -828(%ebp)
L11:
	movb	-828(%ebp), %dl
	leal	-65(%edx), %eax
	cmpb	$25, %al
	ja	L12
	movl	-952(%ebp), %eax
	andl	$4, %eax
	jne	L15
	cmpl	$0, -948(%ebp)
	je	L14
L15:
	decl	%eax
	je	L58
L12:
	movb	-828(%ebp), %al
	testb	%al, %al
	je	L16
	cmpl	$0, -944(%ebp)
	jne	L17
	cmpl	$127, -924(%ebp)
	jg	L16
	pushl	$1
	leal	-828(%ebp), %eax
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	$28
	pushl	-924(%ebp)
	pushl	-900(%ebp)
	movb	$0, -827(%ebp)
	call	_bps
	addl	$28, %esp
	addl	$8, -924(%ebp)
L16:
	cmpl	$270, %ebx
	je	L59
L20:
	cmpl	$284, %ebx
	je	L60
L23:
	cmpl	$271, %ebx
	je	L61
L25:
	cmpl	$298, %ebx
	je	L62
L28:
	cmpl	$310, %ebx
	je	L63
L29:
	cmpl	$426, %ebx
	je	L64
L30:
	cmpl	$438, %ebx
	je	L65
L31:
	cmpl	$314, %ebx
	je	L66
L32:
	cmpl	$325, %ebx
	je	L67
L33:
	cmpl	$326, %ebx
	je	L68
L34:
	cmpl	$0, -928(%ebp)
	js	L35
	movl	-924(%ebp), %eax
	pushl	$43
	addl	$7, %eax
	movl	-900(%ebp), %edx
	pushl	%eax
	pushl	$28
	pushl	-924(%ebp)
	movzbl	-928(%ebp), %eax
	pushl	%eax
	pushl	4(%edx)
	pushl	(%edx)
	call	_boxfill8
	addl	$28, %esp
L35:
	movl	-924(%ebp), %eax
	pushl	$44
	addl	$8, %eax
	pushl	%eax
	pushl	$28
	pushl	-924(%ebp)
	pushl	-900(%ebp)
	call	_sheet_refresh
	addl	$20, %esp
	jmp	L2
L68:
	xorl	$1, -952(%ebp)
	jmp	L34
L67:
	xorl	$2, -952(%ebp)
	jmp	L33
L66:
	xorl	$4, -952(%ebp)
	jmp	L32
L65:
	andl	$-3, -948(%ebp)
	jmp	L31
L64:
	andl	$-2, -948(%ebp)
	jmp	L30
L63:
	orl	$2, -948(%ebp)
	jmp	L29
L62:
	orl	$1, -948(%ebp)
	jmp	L28
L61:
	cmpl	$0, -944(%ebp)
	jne	L26
	pushl	$0
	movl	-900(%ebp), %eax
	pushl	$LC0
	pushl	4(%eax)
	pushl	-908(%ebp)
	movl	$1, -944(%ebp)
	call	_make_wtitle8
	movl	-904(%ebp), %edx
	pushl	$1
	pushl	$LC1
	pushl	4(%edx)
	pushl	-940(%ebp)
	call	_shell_title
	movl	-924(%ebp), %eax
	addl	$32, %esp
	addl	$7, %eax
	movl	$-1, -928(%ebp)
	pushl	$43
	pushl	%eax
	movl	-900(%ebp), %eax
	pushl	$28
	pushl	-924(%ebp)
	pushl	$7
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxfill8
	leal	120(%edi), %eax
	pushl	$2
	pushl	%eax
	call	_fifo_put
	addl	$36, %esp
L27:
	movl	-900(%ebp), %edx
	pushl	$21
	pushl	4(%edx)
	pushl	$0
	pushl	$0
	pushl	%edx
	call	_sheet_refresh
	movl	-904(%ebp), %eax
	pushl	$21
	pushl	4(%eax)
	pushl	$0
	pushl	$0
	pushl	%eax
	call	_sheet_refresh
	addl	$40, %esp
	jmp	L25
L26:
	pushl	$1
	movl	-900(%ebp), %edx
	pushl	$LC0
	pushl	4(%edx)
	pushl	-908(%ebp)
	movl	$0, -944(%ebp)
	call	_make_wtitle8
	movl	-904(%ebp), %eax
	pushl	$0
	pushl	$LC1
	pushl	4(%eax)
	pushl	-940(%ebp)
	call	_shell_title
	leal	120(%edi), %eax
	addl	$32, %esp
	movl	$0, -928(%ebp)
	pushl	$3
	pushl	%eax
	call	_fifo_put
	popl	%esi
	popl	%eax
	jmp	L27
L60:
	cmpl	$0, -944(%ebp)
	je	L23
	pushl	$266
	leal	120(%edi), %eax
	pushl	%eax
	call	_fifo_put
	popl	%eax
	popl	%edx
	jmp	L23
L59:
	cmpl	$8, -924(%ebp)
	jle	L20
	cmpl	$0, -944(%ebp)
	jne	L21
	pushl	$1
	pushl	$LC2
	pushl	$0
	pushl	$7
	pushl	$28
	pushl	-924(%ebp)
	pushl	-900(%ebp)
	call	_bps
	addl	$28, %esp
	subl	$8, -924(%ebp)
	jmp	L20
L21:
	pushl	$264
	leal	120(%edi), %eax
	pushl	%eax
	call	_fifo_put
	popl	%ecx
	popl	%esi
	jmp	L20
L17:
	movsbl	%al,%eax
	addl	$256, %eax
	pushl	%eax
	leal	120(%edi), %eax
	pushl	%eax
	call	_fifo_put
	popl	%eax
	popl	%edx
	jmp	L16
L58:
	cmpl	$0, -948(%ebp)
	je	L12
L14:
	leal	32(%edx), %eax
	movb	%al, -828(%ebp)
	jmp	L12
L9:
	movb	_keytable1.1-256(%ebx), %al
	jmp	L51
L8:
	movb	$0, -828(%ebp)
	jmp	L11
L52:
	pushl	-936(%ebp)
	call	_task_sleep
	call	_io_sti
	popl	%ebx
	jmp	L2
	.data
LC3:
	.ascii "$\0"
LC4:
	.ascii "mem\0"
LC5:
	.ascii "total   %dMB\0"
LC6:
	.ascii "free %dKB\0"
LC7:
	.ascii "clear\0"
LC8:
	.ascii "dir\0"
LC9:
	.ascii "filename.ext   %7d\0"
LC10:
	.ascii "Bad command.\0"
	.text
	.balign 2
.globl _task_console
	.def	_task_console;	.scl	2;	.type	32;	.endef
_task_console:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	$16, %edi
	pushl	%ebx
	subl	$592, %esp
	movl	$28, -596(%ebp)
	movl	$-1, -600(%ebp)
	call	_task_now
	movl	%eax, -604(%ebp)
	call	_timer_alloc
	movl	-604(%ebp), %ebx
	pushl	$1
	addl	$120, %ebx
	movl	%eax, -592(%ebp)
	pushl	%ebx
	pushl	$50
	pushl	%eax
	call	_timer_set
	leal	-524(%ebp), %eax
	pushl	-604(%ebp)
	pushl	%eax
	pushl	$128
	pushl	%ebx
	call	_fifo_init
	addl	$32, %esp
	pushl	$1
	pushl	$LC3
	pushl	$7
	pushl	$12
	pushl	$28
	pushl	$8
	pushl	8(%ebp)
	call	_bps
	addl	$28, %esp
L70:
	call	_io_cli
	movl	-604(%ebp), %esi
	addl	$120, %esi
	pushl	%esi
	call	_fifo_status
	popl	%edx
	testl	%eax, %eax
	je	L129
	pushl	%esi
	call	_fifo_get
	movl	%eax, %ebx
	call	_io_sti
	popl	%eax
	cmpl	$1, %ebx
	jle	L130
L75:
	cmpl	$2, %ebx
	je	L131
L80:
	cmpl	$3, %ebx
	je	L132
L81:
	leal	-256(%ebx), %eax
	cmpl	$255, %eax
	ja	L82
	cmpl	$264, %ebx
	je	L133
	cmpl	$266, %ebx
	je	L134
	cmpl	$239, %edi
	jg	L118
	movl	%edi, %eax
	movl	$8, %edx
	movl	%edx, %esi
	pushl	$1
	cltd
	idivl	%esi
	movb	%bl, -556(%ebp)
	movb	%bl, -590(%ebp,%eax)
	leal	-556(%ebp), %eax
	pushl	%eax
	pushl	$7
	pushl	$12
	pushl	-596(%ebp)
	pushl	%edi
	addl	$8, %edi
	pushl	8(%ebp)
	movb	$0, -555(%ebp)
	call	_bps
L128:
	addl	$28, %esp
L82:
	cmpl	$0, -600(%ebp)
	js	L120
	movl	-596(%ebp), %eax
	addl	$15, %eax
	pushl	%eax
	leal	7(%edi), %eax
	pushl	%eax
	pushl	-596(%ebp)
	pushl	%edi
	movzbl	-600(%ebp), %eax
	pushl	%eax
	movl	8(%ebp), %eax
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxfill8
	addl	$28, %esp
L120:
	movl	-596(%ebp), %eax
	addl	$16, %eax
	pushl	%eax
	leal	8(%edi), %eax
	pushl	%eax
	pushl	-596(%ebp)
	pushl	%edi
	pushl	8(%ebp)
	call	_sheet_refresh
	addl	$20, %esp
	jmp	L70
L118:
	pushl	$1
	leal	-556(%ebp), %eax
	pushl	%eax
	movb	%bl, -556(%ebp)
	addl	$16, -596(%ebp)
	pushl	$7
	movb	%bl, -590(%ebp)
	pushl	$12
	movl	$8, %edi
	pushl	-596(%ebp)
	pushl	$0
	pushl	8(%ebp)
	movb	$0, -555(%ebp)
	call	_bps
	jmp	L128
L134:
	pushl	$1
	leal	-588(%ebp), %esi
	pushl	$LC2
	pushl	$7
	pushl	$12
	pushl	-596(%ebp)
	pushl	%edi
	pushl	8(%ebp)
	call	_bps
	movl	%edi, %eax
	movl	$8, %edx
	movl	$LC4, %edi
	movl	%edx, %ebx
	cltd
	idivl	%ebx
	movb	$0, -590(%ebp,%eax)
	pushl	8(%ebp)
	pushl	-596(%ebp)
	call	_cons_newline
	movl	$4, %ecx
	cld
	movl	%eax, -596(%ebp)
	repe
	cmpsb
	seta	%dl
	setb	%al
	addl	$36, %esp
	cmpb	%al, %dl
	jne	L87
	movl	12(%ebp), %eax
	leal	-556(%ebp), %ebx
	shrl	$20, %eax
	pushl	%eax
	pushl	$LC5
	pushl	%ebx
	call	_sprintf
	pushl	$30
	pushl	%ebx
	pushl	$7
	pushl	$12
	pushl	-596(%ebp)
	pushl	$8
	pushl	8(%ebp)
	call	_bps
	addl	$40, %esp
	pushl	8(%ebp)
	pushl	-596(%ebp)
	call	_cons_newline
	pushl	$3932160
	movl	%eax, -596(%ebp)
	call	_memman_total
	shrl	$10, %eax
	movl	%eax, (%esp)
	pushl	$LC6
	pushl	%ebx
	call	_sprintf
	pushl	$30
	pushl	%ebx
	pushl	$7
	pushl	$12
	pushl	-596(%ebp)
	pushl	$8
	pushl	8(%ebp)
	call	_bps
	addl	$48, %esp
L103:
	pushl	8(%ebp)
	pushl	-596(%ebp)
	call	_cons_newline
	popl	%esi
	popl	%edi
	movl	%eax, -596(%ebp)
L88:
	pushl	$1
	movl	$16, %edi
	pushl	$LC3
	pushl	$7
	pushl	$12
	pushl	-596(%ebp)
	pushl	$8
	pushl	8(%ebp)
	call	_bps
	jmp	L128
L87:
	cld
	leal	-588(%ebp), %esi
	movl	$LC7, %edi
	movl	$6, %ecx
	repe
	cmpsb
	jne	L89
	movl	$28, %ecx
L99:
	movl	$8, %esi
L98:
	movl	8(%ebp), %edx
	movl	%ecx, %eax
	movl	%edx, %ebx
	imull	4(%edx), %eax
	movl	(%edx), %edx
	leal	(%eax,%esi), %eax
	incl	%esi
	cmpl	$247, %esi
	movb	$12, (%eax,%edx)
	jle	L98
	incl	%ecx
	cmpl	$139, %ecx
	jle	L99
	pushl	$140
	pushl	$248
	pushl	$28
	pushl	$8
	pushl	%ebx
	call	_sheet_refresh
	addl	$20, %esp
	movl	$28, -596(%ebp)
	jmp	L88
L89:
	cld
	leal	-588(%ebp), %esi
	movl	$LC8, %edi
	movl	$4, %ecx
	repe
	cmpsb
	jne	L101
	xorl	%esi, %esi
	xorl	%ebx, %ebx
L114:
	movb	1058304(%ebx), %al
	testb	%al, %al
	je	L103
	cmpb	$-27, %al
	je	L104
	testb	$24, 1058315(%ebx)
	jne	L104
	pushl	1058332(%ebx)
	pushl	$LC9
	leal	-556(%ebp), %eax
	pushl	%eax
	call	_sprintf
	leal	1058304(%ebx), %edx
	xorl	%ecx, %ecx
	addl	$12, %esp
L113:
	movb	(%edx), %al
	incl	%edx
	movb	%al, -556(%ebp,%ecx)
	incl	%ecx
	cmpl	$7, %ecx
	jle	L113
	movb	1058312(%ebx), %al
	movb	%al, -547(%ebp)
	movb	1058313(%ebx), %al
	movb	%al, -546(%ebp)
	movb	1058314(%ebx), %al
	pushl	$30
	movb	%al, -545(%ebp)
	leal	-556(%ebp), %eax
	pushl	%eax
	pushl	$7
	pushl	$0
	pushl	-596(%ebp)
	pushl	$8
	pushl	8(%ebp)
	call	_bps
	pushl	8(%ebp)
	pushl	-596(%ebp)
	call	_cons_newline
	addl	$36, %esp
	movl	%eax, -596(%ebp)
L104:
	incl	%esi
	addl	$32, %ebx
	cmpl	$223, %esi
	jle	L114
	jmp	L103
L101:
	cmpb	$0, -588(%ebp)
	je	L88
	pushl	$12
	pushl	$LC10
	pushl	$7
	pushl	$0
	pushl	-596(%ebp)
	pushl	$8
	pushl	8(%ebp)
	call	_bps
	pushl	8(%ebp)
	pushl	-596(%ebp)
	call	_cons_newline
	addl	$36, %esp
	movl	%eax, -596(%ebp)
	jmp	L88
L133:
	cmpl	$16, %edi
	jle	L82
	pushl	$1
	pushl	$LC2
	pushl	$7
	pushl	$12
	pushl	$28
	pushl	%edi
	subl	$8, %edi
	pushl	8(%ebp)
	call	_bps
	jmp	L128
L132:
	pushl	$43
	leal	7(%edi), %eax
	pushl	%eax
	movl	8(%ebp), %eax
	pushl	$28
	pushl	%edi
	pushl	$12
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxfill8
	addl	$28, %esp
	movl	$-1, -600(%ebp)
	jmp	L81
L131:
	movl	$7, -600(%ebp)
	jmp	L80
L130:
	cmpl	$1, %ebx
	je	L135
	pushl	$1
	pushl	%esi
	pushl	$50
	pushl	-592(%ebp)
	call	_timer_set
	addl	$16, %esp
	cmpl	$0, -600(%ebp)
	js	L75
	movl	$12, -600(%ebp)
	jmp	L75
L135:
	pushl	$0
	pushl	%esi
	pushl	$50
	pushl	-592(%ebp)
	call	_timer_set
	addl	$16, %esp
	cmpl	$0, -600(%ebp)
	js	L75
	movl	$7, -600(%ebp)
	jmp	L75
L129:
	pushl	-604(%ebp)
	call	_task_sleep
	call	_io_sti
	popl	%eax
	jmp	L70
	.balign 2
.globl _cons_newline
	.def	_cons_newline;	.scl	2;	.type	32;	.endef
_cons_newline:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	$28, %edi
	pushl	%ebx
	cmpl	$139, 8(%ebp)
	jg	L148
	addl	$16, 8(%ebp)
L138:
	movl	8(%ebp), %eax
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L148:
	movl	$8, %esi
L147:
	movl	12(%ebp), %eax
	movl	%edi, %edx
	movl	4(%eax), %ecx
	movl	(%eax), %ebx
	leal	16(%edi), %eax
	imull	%ecx, %eax
	imull	%ecx, %edx
	leal	(%eax,%esi), %eax
	leal	(%edx,%esi), %edx
	incl	%esi
	movb	(%eax,%ebx), %al
	cmpl	$247, %esi
	movb	%al, (%edx,%ebx)
	jle	L147
	incl	%edi
	cmpl	$139, %edi
	jle	L148
	movl	$140, %edi
L158:
	movl	$8, %esi
L157:
	movl	12(%ebp), %edx
	movl	%edi, %eax
	movl	%edx, %ecx
	imull	4(%edx), %eax
	movl	(%edx), %edx
	leal	(%eax,%esi), %eax
	incl	%esi
	cmpl	$247, %esi
	movb	$12, (%eax,%edx)
	jle	L157
	incl	%edi
	cmpl	$155, %edi
	jle	L158
	pushl	$156
	pushl	$248
	pushl	$28
	pushl	$8
	pushl	%ecx
	call	_sheet_refresh
	addl	$20, %esp
	jmp	L138
	.def	_memman_total;	.scl	2;	.type	32;	.endef
	.def	_sprintf;	.scl	2;	.type	32;	.endef
	.def	_cons_newline;	.scl	2;	.type	32;	.endef
	.def	_task_now;	.scl	2;	.type	32;	.endef
	.def	_mouse_decode;	.scl	2;	.type	32;	.endef
	.def	_sheet_refresh;	.scl	2;	.type	32;	.endef
	.def	_boxfill8;	.scl	2;	.type	32;	.endef
	.def	_shell_title;	.scl	2;	.type	32;	.endef
	.def	_make_wtitle8;	.scl	2;	.type	32;	.endef
	.def	_fifo_put;	.scl	2;	.type	32;	.endef
	.def	_bps;	.scl	2;	.type	32;	.endef
	.def	_fifo_get;	.scl	2;	.type	32;	.endef
	.def	_task_sleep;	.scl	2;	.type	32;	.endef
	.def	_fifo_status;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_sheet_updown;	.scl	2;	.type	32;	.endef
	.def	_sheet_move;	.scl	2;	.type	32;	.endef
	.def	_task_console;	.scl	2;	.type	32;	.endef
	.def	_task_alloc;	.scl	2;	.type	32;	.endef
	.def	_make_shell;	.scl	2;	.type	32;	.endef
	.def	_taskrun;	.scl	2;	.type	32;	.endef
	.def	_task_init;	.scl	2;	.type	32;	.endef
	.def	_make_textbox8;	.scl	2;	.type	32;	.endef
	.def	_make_window8;	.scl	2;	.type	32;	.endef
	.def	_init_mouse_cursor8;	.scl	2;	.type	32;	.endef
	.def	_enable_mouse;	.scl	2;	.type	32;	.endef
	.def	_init_screen;	.scl	2;	.type	32;	.endef
	.def	_sheet_setbuf;	.scl	2;	.type	32;	.endef
	.def	_memman_alloc_4k;	.scl	2;	.type	32;	.endef
	.def	_sheet_alloc;	.scl	2;	.type	32;	.endef
	.def	_shtctl_init;	.scl	2;	.type	32;	.endef
	.def	_init_palette;	.scl	2;	.type	32;	.endef
	.def	_memman_free;	.scl	2;	.type	32;	.endef
	.def	_memman_init;	.scl	2;	.type	32;	.endef
	.def	_memtest;	.scl	2;	.type	32;	.endef
	.def	_init_keyboard;	.scl	2;	.type	32;	.endef
	.def	_timer_set;	.scl	2;	.type	32;	.endef
	.def	_timer_alloc;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
	.def	_init_pit;	.scl	2;	.type	32;	.endef
	.def	_io_sti;	.scl	2;	.type	32;	.endef
	.def	_init_pic;	.scl	2;	.type	32;	.endef
	.def	_init_gdtidt;	.scl	2;	.type	32;	.endef
	.def	_fifo_init;	.scl	2;	.type	32;	.endef
