[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_io_hlt
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_out8
	EXTERN	_io_store_eflags
[FILE "bootpack.c"]
[SECTION .text]
	ALIGN	2
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,24
	CALL	_init_palette
	MOV	DWORD [-4+EBP],655360
	MOV	DWORD [-8+EBP],320
	MOV	DWORD [-12+EBP],200
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [-8+EBP]
	DEC	EAX
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	14
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,28
	PUSH	EAX
	MOV	EAX,DWORD [-8+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,28
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,27
	PUSH	EAX
	MOV	EAX,DWORD [-8+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,27
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,26
	PUSH	EAX
	MOV	EAX,DWORD [-8+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,26
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,24
	PUSH	EAX
	PUSH	59
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,24
	PUSH	EAX
	PUSH	3
	PUSH	7
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,4
	PUSH	EAX
	PUSH	2
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,24
	PUSH	EAX
	PUSH	2
	PUSH	7
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,4
	PUSH	EAX
	PUSH	59
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,4
	PUSH	EAX
	PUSH	3
	PUSH	15
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,5
	PUSH	EAX
	PUSH	59
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,23
	PUSH	EAX
	PUSH	59
	PUSH	15
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	59
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	2
	PUSH	0
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	60
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,24
	PUSH	EAX
	PUSH	60
	PUSH	0
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,24
	PUSH	EAX
	MOV	EAX,DWORD [-8+EBP]
	SUB	EAX,4
	PUSH	EAX
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,24
	PUSH	EAX
	MOV	EAX,DWORD [-8+EBP]
	SUB	EAX,47
	PUSH	EAX
	PUSH	15
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,4
	PUSH	EAX
	MOV	EAX,DWORD [-8+EBP]
	SUB	EAX,47
	PUSH	EAX
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,23
	PUSH	EAX
	MOV	EAX,DWORD [-8+EBP]
	SUB	EAX,47
	PUSH	EAX
	PUSH	15
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,3
	PUSH	EAX
	MOV	EAX,DWORD [-8+EBP]
	SUB	EAX,4
	PUSH	EAX
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,3
	PUSH	EAX
	MOV	EAX,DWORD [-8+EBP]
	SUB	EAX,47
	PUSH	EAX
	PUSH	7
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,3
	PUSH	EAX
	MOV	EAX,DWORD [-8+EBP]
	SUB	EAX,3
	PUSH	EAX
	MOV	EAX,DWORD [-12+EBP]
	SUB	EAX,24
	PUSH	EAX
	MOV	EAX,DWORD [-8+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	7
	PUSH	DWORD [-8+EBP]
	PUSH	DWORD [-4+EBP]
	CALL	_boxfill8
	ADD	ESP,32
L2:
	CALL	_io_hlt
	JMP	L2
[SECTION .data]
_table_rgb.0:
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-58
	DB	-58
	DB	-58
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
[SECTION .text]
	ALIGN	2
	GLOBAL	_init_palette
_init_palette:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,8
	SUB	ESP,4
	PUSH	_table_rgb.0
	PUSH	15
	PUSH	0
	CALL	_set_palette
	ADD	ESP,16
	LEAVE
	RET
	ALIGN	2
	GLOBAL	_set_palette
_set_palette:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,8
	CALL	_io_load_eflags
	MOV	DWORD [-8+EBP],EAX
	CALL	_io_cli
	SUB	ESP,8
	PUSH	DWORD [8+EBP]
	PUSH	968
	CALL	_io_out8
	ADD	ESP,16
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [-4+EBP],EAX
L7:
	MOV	EAX,DWORD [-4+EBP]
	CMP	EAX,DWORD [12+EBP]
	JLE	L10
	JMP	L8
L10:
	SUB	ESP,8
	MOV	EAX,DWORD [16+EBP]
	MOV	AL,BYTE [EAX]
	SHR	AL,2
	AND	EAX,255
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,16
	SUB	ESP,8
	MOV	EAX,DWORD [16+EBP]
	INC	EAX
	MOV	AL,BYTE [EAX]
	SHR	AL,2
	AND	EAX,255
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,16
	SUB	ESP,8
	MOV	EAX,DWORD [16+EBP]
	ADD	EAX,2
	MOV	AL,BYTE [EAX]
	SHR	AL,2
	AND	EAX,255
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,16
	LEA	EAX,DWORD [16+EBP]
	ADD	DWORD [EAX],3
	LEA	EAX,DWORD [-4+EBP]
	INC	DWORD [EAX]
	JMP	L7
L8:
	SUB	ESP,12
	PUSH	DWORD [-8+EBP]
	CALL	_io_store_eflags
	ADD	ESP,16
	LEAVE
	RET
	ALIGN	2
	GLOBAL	_boxfill8
_boxfill8:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,12
	MOV	EAX,DWORD [16+EBP]
	MOV	BYTE [-1+EBP],AL
	MOV	EAX,DWORD [24+EBP]
	MOV	DWORD [-12+EBP],EAX
L12:
	MOV	EAX,DWORD [-12+EBP]
	CMP	EAX,DWORD [32+EBP]
	JLE	L15
	JMP	L11
L15:
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [-8+EBP],EAX
L16:
	MOV	EAX,DWORD [-8+EBP]
	CMP	EAX,DWORD [28+EBP]
	JLE	L19
	JMP	L14
L19:
	MOV	EAX,DWORD [-12+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [-8+EBP]
	MOV	EDX,EAX
	ADD	EDX,DWORD [8+EBP]
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
	LEA	EAX,DWORD [-8+EBP]
	INC	DWORD [EAX]
	JMP	L16
L14:
	LEA	EAX,DWORD [-12+EBP]
	INC	DWORD [EAX]
	JMP	L12
L11:
	LEAVE
	RET
