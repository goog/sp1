     1 00000000                                 [FORMAT "WCOFF"]
     2 00000000                                 [INSTRSET "i486p"]
     3 00000000                                 [BITS 32]
     4 00000000                                 
     5 00000000                                 [FILE "naskfunc.nas"]
     6 00000000                                 	GLOBAL _io_hlt ; function names included
     7 00000000                                 	GLOBAL _write_mem8 ;
     8 00000000                                 	GLOBAL _io_cli,_io_sti,_io_stihlt
     9 00000000                                 	GLOBAL _io_in8,_io_in16,_io_in32
    10 00000000                                 	GLOBAL _io_out8,_io_out16,_io_out32
    11 00000000                                 	GLOBAL _io_load_eflags,_io_store_eflags
    12 00000000                                 	GLOBAL _load_gdtr,_load_idtr
    13 00000000                                 	GLOBAL _load_cr0,_store_cr0
    14 00000000                                 	GLOBAL	_memtest_sub
    15 00000000                                 	GLOBAL	_asm_inthandler21, _asm_inthandler2c
    16 00000000                                 	EXTERN	_inthandler21,_inthandler2c
    17                                          [SECTION .text]
    18 00000000                                 _io_hlt:    ; void io_hlt(void);
    19 00000000 F4                              	HLT
    20 00000001 C3                              	RET
    21 00000002                                 
    22 00000002                                 _write_mem8: ; void write_mem8(int addr, int data)  ;
    23 00000002 8B 4C 24 04                     	MOV ECX,[ESP+4] ; move the address to 32bits counter
    24 00000006 8A 44 24 08                     	MOV AL,[ESP+8]  ; write 8bits data
    25 0000000A 88 01                           	MOV [ECX],AL
    26 0000000C C3                              	RET
    27 0000000D                                 
    28 0000000D                                 
    29 0000000D                                 _io_cli:  ;   void io_cli(void);
    30 0000000D                                 
    31 0000000D FA                              	CLI
    32 0000000E C3                              	RET
    33 0000000F                                 
    34 0000000F                                 _io_sti: ; void io_sti(void);
    35 0000000F FB                              	STI
    36 00000010 C3                              	RET
    37 00000011                                 
    38 00000011                                 _io_stihlt:  ; void io_stihlt(void);
    39 00000011 FB                              	STI
    40 00000012 F4                              	HLT
    41 00000013 C3                              	RET
    42 00000014                                 
    43 00000014                                 
    44 00000014                                 _io_in8:  ; int io_in8(int port);
    45 00000014 8B 54 24 04                     	MOV EDX,[ESP+4]
    46 00000018 B8 00000000                     	MOV EAX,0
    47 0000001D EC                              	IN AL,DX
    48 0000001E C3                              	RET 
    49 0000001F                                 
    50 0000001F                                 
    51 0000001F                                 _io_in16:  ; int io_in16(int port);
    52 0000001F 8B 54 24 04                     	MOV EDX,[ESP+4]
    53 00000023 B8 00000000                     	MOV EAX,0
    54 00000028 66 ED                           	IN AX,DX
    55 0000002A C3                              	RET 
    56 0000002B                                 
    57 0000002B                                 
    58 0000002B                                 _io_in32:  ; int io_in32(int port);
    59 0000002B 8B 54 24 04                     	MOV EDX,[ESP+4]
    60 0000002F ED                              	IN EAX,DX
    61 00000030 C3                              	RET 
    62 00000031                                 
    63 00000031                                 _io_out8:  ; void io_out8(int port,int data);
    64 00000031 8B 54 24 04                     	MOV EDX,[ESP+4]
    65 00000035 8A 44 24 08                     	MOV AL,[ESP+8]
    66 00000039 EE                              	OUT DX,AL
    67 0000003A C3                              	RET
    68 0000003B                                 
    69 0000003B                                 
    70 0000003B                                 _io_out16:  ; void io_out16(int port,int data);
    71 0000003B 8B 54 24 04                     	MOV EDX,[ESP+4]
    72 0000003F 8B 44 24 08                     	MOV EAX,[ESP+8]
    73 00000043 66 EF                           	OUT DX,AX
    74 00000045 C3                              	RET
    75 00000046                                 
    76 00000046                                 _io_out32:  ; void io_out32(int port,int data);
    77 00000046 8B 54 24 04                     	MOV EDX,[ESP+4]
    78 0000004A 8B 44 24 08                     	MOV EAX,[ESP+8]
    79 0000004E EF                              	OUT DX,EAX
    80 0000004F C3                              	RET
    81 00000050                                 
    82 00000050                                 _io_load_eflags:  ; int io_load_eflags(void);
    83 00000050 9C                              	PUSHFD
    84 00000051 58                              	POP EAX
    85 00000052 C3                              	RET
    86 00000053                                 
    87 00000053                                 
    88 00000053                                 _io_store_eflags:  ; void io_store_eflags(int eflags);
    89 00000053 8B 44 24 04                     	MOV EAX,[ESP+4]
    90 00000057 50                              	PUSH EAX
    91 00000058 9D                              	POPFD
    92 00000059 C3                              	RET
    93 0000005A                                 
    94 0000005A                                 _load_gdtr:	; void load_gdtr(int limit, int addr);
    95 0000005A 66 8B 44 24 04                  		MOV AX,[ESP+4]		; limit
    96 0000005F 66 89 44 24 06                  		MOV [ESP+6],AX
    97 00000064 0F 01 54 24 06                  		LGDT [ESP+6]
    98 00000069 C3                              		RET
    99 0000006A                                 
   100 0000006A                                 _load_idtr:		; void load_idtr(int limit, int addr);
   101 0000006A 66 8B 44 24 04                  		MOV AX,[ESP+4]		; limit
   102 0000006F 66 89 44 24 06                  		MOV [ESP+6],AX
   103 00000074 0F 01 5C 24 06                  		LIDT [ESP+6]
   104 00000079 C3                              		RET
   105 0000007A                                 _load_cr0:		; int load_cr0(void);
   106 0000007A 0F 20 C0                        		MOV		EAX,CR0
   107 0000007D C3                              		RET
   108 0000007E                                 
   109 0000007E                                 _store_cr0:		; void store_cr0(int cr0);
   110 0000007E 8B 44 24 04                     		MOV		EAX,[ESP+4]
   111 00000082 0F 22 C0                        		MOV		CR0,EAX
   112 00000085 C3                              		RET
   113 00000086                                 
   114 00000086                                 
   115 00000086                                 
   116 00000086                                 
   117 00000086                                 
   118 00000086                                 _asm_inthandler21:
   119 00000086 06                              	PUSH ES
   120 00000087 1E                              	PUSH DS
   121 00000088 60                              	PUSHAD
   122 00000089 89 E0                           	MOV EAX,ESP
   123 0000008B 50                              	PUSH EAX
   124 0000008C 66 8C D0                        	MOV AX,SS 
   125 0000008F 8E D8                           	MOV DS,AX
   126 00000091 8E C0                           	MOV ES,AX
   127 00000093 E8 [00000000]                   	CALL _inthandler21
   128 00000098 58                              	POP EAX
   129 00000099 61                              	POPAD
   130 0000009A 1F                              	POP DS
   131 0000009B 07                              	POP ES
   132 0000009C CF                              	IRETD
   133 0000009D                                 
   134 0000009D                                 _asm_inthandler2c:
   135 0000009D 06                              	PUSH	ES
   136 0000009E 1E                              	PUSH	DS
   137 0000009F 60                              	PUSHAD
   138 000000A0 89 E0                           	MOV		EAX,ESP
   139 000000A2 50                              	PUSH	EAX
   140 000000A3 66 8C D0                        	MOV		AX,SS
   141 000000A6 8E D8                           	MOV		DS,AX
   142 000000A8 8E C0                           	MOV		ES,AX
   143 000000AA E8 [00000000]                   	CALL	_inthandler2c
   144 000000AF 58                              	POP		EAX
   145 000000B0 61                              	POPAD
   146 000000B1 1F                              	POP		DS
   147 000000B2 07                              	POP		ES
   148 000000B3 CF                              	IRETD
   149 000000B4                                 
   150 000000B4                                 
   151 000000B4                                 _memtest_sub: ; unsigned int memtest_sub(unsigned int start, unsigned int end)
   152 000000B4 57                              	PUSH EDI
   153 000000B5 56                              	PUSH ESI
   154 000000B6 53                              	PUSH EBX
   155 000000B7 BE AA55AA55                     	MOV ESI,0xaa55aa55
   156 000000BC BF 55AA55AA                     	MOV EDI,0x55aa55aa
   157 000000C1 8B 44 24 10                     	MOV EAX,[ESP+12+4]
   158 000000C5                                 
   159 000000C5                                 mts_loop:
   160 000000C5 89 C3                           	MOV EBX,EAX
   161 000000C7 81 C3 00000FFC                  	ADD EBX,0xffc
   162 000000CD 8B 13                           	MOV EDX,[EBX]
   163 000000CF 89 33                           	MOV [EBX],ESI
   164 000000D1 83 33 FF                        	XOR DWORD [EBX],0xffffffff
   165 000000D4 3B 3B                           	CMP EDI,[EBX]
   166 000000D6 75 17                           	JNE mts_fin
   167 000000D8 83 33 FF                        	XOR DWORD [EBX],0xffffffff
   168 000000DB 3B 33                           	CMP ESI,[EBX]
   169 000000DD 75 10                           	JNE mts_fin
   170 000000DF 89 13                           	MOV [EBX],EDX
   171 000000E1 05 00001000                     	ADD EAX,0x1000
   172 000000E6 3B 44 24 14                     	CMP EAX,[ESP+12+8]
   173 000000EA 76 D9                           	JBE mts_loop
   174 000000EC 5B                              	POP EBX
   175 000000ED 5E                              	POP ESI
   176 000000EE 5F                              	POP EDI
   177 000000EF                                 
   178 000000EF                                 mts_fin:
   179 000000EF 89 13                           	MOV [EBX],EDX
   180 000000F1 5B                              	POP EBX
   181 000000F2 5E                              	POP ESI
   182 000000F3 5F                              	POP EDI
   183 000000F4 C3                              	RET
